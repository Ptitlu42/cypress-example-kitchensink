name: Cypress Tests with Cucumber

on:
  push:
    branches: ['*']
  pull_request:
    branches: ['*']

permissions:
  contents: read
  pages: write
  id-token: write

jobs:
  cypress-tests:
    runs-on: ubuntu-latest
    container:
      image: cypress/base:latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Install dependencies
        run: npm ci

      - name: Verify Cypress execution
        run: npx cypress verify

      - name: Start server and run standard e2e tests
        run: npm run test:ci:report
        continue-on-error: true
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Run Cucumber/Gherkin tests
        run: |
          echo "=== Running Cucumber tests ==="
          echo "Looking for feature files:"
          find cypress/e2e -name "*.feature" -type f || echo "No .feature files found"
          
          echo "Looking for step definitions:"
          find cypress/e2e -name "*step*.js" -type f || echo "No step definition files found"
          
          echo "Creating cucumber-json directory:"
          mkdir -p cypress/cucumber-json
          
          echo "Running Cypress with Cucumber (using configured preprocessor):"
          npx cypress run --spec "cypress/e2e/**/*.feature" || echo "Cucumber tests execution completed with errors"
          
          echo "Checking JSON results (looking for .cucumber.json files):"
          ls -la cypress/cucumber-json/ || echo "No cucumber-json directory"
          find cypress/cucumber-json -name "*.cucumber.json" 2>/dev/null || echo "No .cucumber.json files found"
          
          echo "JSON file contents (if any):"
          for file in cypress/cucumber-json/*.cucumber.json; do
            if [ -f "$file" ]; then
              echo "=== Content of $file ==="
              head -10 "$file" || echo "Cannot read file"
            fi
          done
          
          echo "Also checking for any JSON files:"
          for file in cypress/cucumber-json/*.json; do
            if [ -f "$file" ]; then
              echo "=== Content of $file ==="
              head -10 "$file" || echo "Cannot read file"
            fi
          done
        continue-on-error: true
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Generate Cucumber HTML report
        run: |
          echo "=== Generating Cucumber HTML report ==="
          echo "Current directory contents:"
          ls -la
          
          echo "Cypress directory contents:"
          ls -la cypress/ || echo "No cypress directory"
          
          echo "Running report generation:"
          npm run generate:cucumber-report || echo "Report generation failed"
          
          echo "Checking generated reports:"
          ls -la cypress/reports/ || echo "No reports directory"
        continue-on-error: true

      - name: Create simple working report
        run: |
          echo "=== Creating comprehensive report ==="
          mkdir -p cypress/reports
          
          # Backup any existing Mochawesome report
          if [ -f "cypress/reports/index.html" ]; then
            cp cypress/reports/index.html cypress/reports/mochawesome-backup.html
            echo "Backed up existing Mochawesome report"
          fi
          
          # Collect debug information first
          CURRENT_DIR=$(pwd)
          CURRENT_DATE=$(date)
          
          # Check cypress directory
          if [ -d "cypress" ]; then
            CYPRESS_DIR_INFO=$(ls -la cypress/ 2>/dev/null | tr '\n' '<br>' || echo "Cypress directory exists but cannot list contents")
          else
            CYPRESS_DIR_INFO="No cypress directory found"
          fi
          
          # Check cucumber-json directory
          if [ -d "cypress/cucumber-json" ]; then
            CUCUMBER_JSON_INFO=$(ls -la cypress/cucumber-json/ 2>/dev/null | tr '\n' '<br>' || echo "cucumber-json directory exists but cannot list contents")
          else
            CUCUMBER_JSON_INFO="No cucumber-json directory found"
          fi
          
          # Check reports directory
          if [ -d "cypress/reports" ]; then
            REPORTS_DIR_INFO=$(ls -la cypress/reports/ 2>/dev/null | tr '\n' '<br>' || echo "reports directory exists but cannot list contents")
          else
            REPORTS_DIR_INFO="No reports directory found"
          fi
          
          # Check for feature files
          FEATURE_FILES=$(find . -name "*.feature" -type f 2>/dev/null | tr '\n' '<br>' || echo "No .feature files found")
          
          # Check for cucumber JSON files
          CUCUMBER_JSON_FILES=$(find . -name "*.json" -path "*/cucumber*" -type f 2>/dev/null | tr '\n' '<br>' || echo "No cucumber JSON files found")
          
          # Get versions
          NODE_VER=$(node --version 2>/dev/null || echo "Not available")
          NPM_VER=$(npm --version 2>/dev/null || echo "Not available")
          CYPRESS_VER=$(npx cypress --version 2>/dev/null || echo "Not available")
          
          # Check package.json for cucumber scripts
          PACKAGE_SCRIPTS=$(grep -A 5 -B 5 cucumber package.json 2>/dev/null | tr '\n' '<br>' || echo "No cucumber scripts found")
          
          # Create the HTML report
          cat > cypress/reports/index.html << 'HTMLEOF'
          <!DOCTYPE html>
          <html lang="en">
          <head>
              <meta charset="UTF-8">
              <meta name="viewport" content="width=device-width, initial-scale=1.0">
              <title>Cypress Test Reports</title>
              <style>
                  body { font-family: Arial, sans-serif; margin: 0; padding: 20px; background: #f5f5f5; }
                  .header { background: #2c3e50; color: white; padding: 20px; border-radius: 8px; margin-bottom: 20px; }
                  .header h1 { margin: 0; }
                  .section { background: white; margin: 20px 0; padding: 20px; border-radius: 8px; box-shadow: 0 2px 4px rgba(0,0,0,0.1); }
                  .section h2 { color: #2c3e50; border-bottom: 2px solid #3498db; padding-bottom: 10px; }
                  .debug { background: #f8f9fa; border: 1px solid #dee2e6; padding: 15px; border-radius: 5px; font-family: monospace; white-space: pre-wrap; }
                  .button { background: #3498db; color: white; padding: 10px 20px; border: none; border-radius: 5px; cursor: pointer; margin: 5px; }
                  .button:hover { background: #2980b9; }
                  .no-data { color: #7f8c8d; font-style: italic; }
                  .success { color: #27ae60; font-weight: bold; }
                  .error { color: #e74c3c; font-weight: bold; }
              </style>
          </head>
          <body>
              <div class="header">
                  <h1>üß™ Cypress Test Reports Dashboard</h1>
                  <p id="generation-date">Generated on: Loading...</p>
              </div>
              
              <div class="section">
                  <h2>üìä Environment Information</h2>
                  <div class="debug" id="env-info">Loading environment information...</div>
              </div>
              
              <div class="section">
                  <h2>ü•í Cucumber Test Results</h2>
                  <div id="cucumber-results">
                      <p id="cucumber-status">Checking Cucumber results...</p>
                      <div id="cucumber-files"></div>
                  </div>
              </div>
              
              <div class="section">
                  <h2>üìã Mochawesome Report</h2>
                  <div id="mochawesome-results">
                      <p id="mochawesome-status">Checking Mochawesome report...</p>
                  </div>
              </div>
              
              <div class="section">
                  <h2>üêõ Debug Information</h2>
                  <div class="debug" id="debug-info">Loading debug information...</div>
              </div>
              
              <script>
                  // Populate with actual data
                  document.getElementById('generation-date').textContent = 'Generated on: GENERATION_DATE_PLACEHOLDER';
                  
                  document.getElementById('env-info').innerHTML = `Working Directory: CURRENT_DIR_PLACEHOLDER
          
          Cypress Directory Structure:
          CYPRESS_DIR_PLACEHOLDER
          
          Cucumber JSON Directory:
          CUCUMBER_JSON_PLACEHOLDER
          
          Reports Directory:
          REPORTS_DIR_PLACEHOLDER
          
          Package.json Scripts:
          PACKAGE_SCRIPTS_PLACEHOLDER`;
          
                  document.getElementById('debug-info').innerHTML = `File System Check:
          FEATURE_FILES_PLACEHOLDER
          
          Cucumber JSON Files:
          CUCUMBER_JSON_FILES_PLACEHOLDER
          
          Environment Variables:
          NODE_VERSION: NODE_VER_PLACEHOLDER
          NPM_VERSION: NPM_VER_PLACEHOLDER  
          CYPRESS_VERSION: CYPRESS_VER_PLACEHOLDER
          
          Current Build Step Results:
          BUILD_RESULTS_PLACEHOLDER`;
                  
                  function showCucumberReport() {
                      window.open('cucumber-report.html', '_blank');
                  }
                  
                  function showMochawesome() {
                      window.open('mochawesome-backup.html', '_blank');
                  }
                  
                  function showJsonData() {
                      alert('JSON files are available in the cucumber-json directory. Check the debug section for file details.');
                  }
              </script>
          </body>
          </html>
          HTMLEOF
          
          # Now replace placeholders with actual values
          sed -i "s|GENERATION_DATE_PLACEHOLDER|${CURRENT_DATE}|g" cypress/reports/index.html
          sed -i "s|CURRENT_DIR_PLACEHOLDER|${CURRENT_DIR}|g" cypress/reports/index.html
          sed -i "s|CYPRESS_DIR_PLACEHOLDER|${CYPRESS_DIR_INFO}|g" cypress/reports/index.html
          sed -i "s|CUCUMBER_JSON_PLACEHOLDER|${CUCUMBER_JSON_INFO}|g" cypress/reports/index.html
          sed -i "s|REPORTS_DIR_PLACEHOLDER|${REPORTS_DIR_INFO}|g" cypress/reports/index.html
          sed -i "s|PACKAGE_SCRIPTS_PLACEHOLDER|${PACKAGE_SCRIPTS}|g" cypress/reports/index.html
          sed -i "s|FEATURE_FILES_PLACEHOLDER|${FEATURE_FILES}|g" cypress/reports/index.html
          sed -i "s|CUCUMBER_JSON_FILES_PLACEHOLDER|${CUCUMBER_JSON_FILES}|g" cypress/reports/index.html
          sed -i "s|NODE_VER_PLACEHOLDER|${NODE_VER}|g" cypress/reports/index.html
          sed -i "s|NPM_VER_PLACEHOLDER|${NPM_VER}|g" cypress/reports/index.html
          sed -i "s|CYPRESS_VER_PLACEHOLDER|${CYPRESS_VER}|g" cypress/reports/index.html
          
          # Check build results and update status
          BUILD_RESULTS=""
          if [ -f "cypress/reports/mochawesome-backup.html" ]; then
            BUILD_RESULTS="${BUILD_RESULTS}- Standard e2e tests: ‚úÖ Completed<br>"
          else
            BUILD_RESULTS="${BUILD_RESULTS}- Standard e2e tests: ‚ùå Not found<br>"
          fi
          
          if [ -d "cypress/cucumber-json" ]; then
            BUILD_RESULTS="${BUILD_RESULTS}- Cucumber tests: ‚úÖ Directory created<br>"
          else
            BUILD_RESULTS="${BUILD_RESULTS}- Cucumber tests: ‚ùå Directory missing<br>"
          fi
          
          if [ -f "cypress/reports/cucumber-report.html" ]; then
            BUILD_RESULTS="${BUILD_RESULTS}- Cucumber HTML report: ‚úÖ Generated"
          else
            BUILD_RESULTS="${BUILD_RESULTS}- Cucumber HTML report: ‚ùå Not generated"
          fi
          
          sed -i "s|BUILD_RESULTS_PLACEHOLDER|${BUILD_RESULTS}|g" cypress/reports/index.html
          
          # Update cucumber status dynamically
          if [ -f "cypress/reports/cucumber-report.html" ]; then
            sed -i 's|<p id="cucumber-status">.*</p>|<p class="success">‚úÖ Cucumber HTML report found</p><button class="button" onclick="showCucumberReport()">View Cucumber Report</button>|' cypress/reports/index.html
          else
            sed -i 's|<p id="cucumber-status">.*</p>|<p class="error">‚ùå No Cucumber HTML report found</p>|' cypress/reports/index.html
          fi
          
          # Check for JSON files and update
          if [ -d "cypress/cucumber-json" ] && [ "$(ls -A cypress/cucumber-json 2>/dev/null)" ]; then
            JSON_LIST=""
            for file in cypress/cucumber-json/*.json; do
              if [ -f "$file" ]; then
                file_size=$(wc -c < "$file")
                JSON_LIST="${JSON_LIST}<li>$(basename "$file") (${file_size} bytes)</li>"
              fi
            done
            sed -i "s|<div id=\"cucumber-files\"></div>|<p class=\"success\">‚úÖ Cucumber JSON files found:</p><ul>${JSON_LIST}</ul><button class=\"button\" onclick=\"showJsonData()\">View JSON Data</button>|" cypress/reports/index.html
          else
            sed -i 's|<div id="cucumber-files"></div>|<p class="error">‚ùå No Cucumber JSON files found</p>|' cypress/reports/index.html
          fi
          
          # Update mochawesome status
          if [ -f "cypress/reports/mochawesome-backup.html" ]; then
            sed -i 's|<p id="mochawesome-status">.*</p>|<p class="success">‚úÖ Mochawesome report available</p><button class="button" onclick="showMochawesome()">View Mochawesome Report</button>|' cypress/reports/index.html
          else
            sed -i 's|<p id="mochawesome-status">.*</p>|<p class="error">‚ùå No Mochawesome report found</p>|' cypress/reports/index.html
          fi
          
          echo "=== Report creation completed ==="
          echo "Generated report contents:"
          ls -la cypress/reports/
          
          echo "=== Final debug check ==="
          echo "Feature files found:"
          find . -name "*.feature" -type f 2>/dev/null || echo "No feature files"
          echo "Cucumber JSON directory contents:"
          ls -la cypress/cucumber-json/ 2>/dev/null || echo "Directory does not exist"
          echo "Reports directory contents:"
          ls -la cypress/reports/ 2>/dev/null || echo "Directory does not exist"

      - name: Remove intermediate step
        run: echo "Single page report created successfully"

      - name: Upload test artifacts
        uses: actions/upload-artifact@v4
        if: failure()
        with:
          name: cypress-screenshots
          path: cypress/screenshots
          retention-days: 30

      - name: Upload test videos
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: cypress-videos
          path: cypress/videos
          retention-days: 30

      - name: Upload test reports
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: cypress-reports
          path: cypress/reports
          retention-days: 30

      - name: Upload Cucumber reports
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: cucumber-reports
          path: cypress/cucumber-json
          retention-days: 30

      - name: Prepare Pages content
        run: |
          mkdir -p pages-content
          cp -r cypress/reports/* pages-content/ 2>/dev/null || true
          cp -r cypress/screenshots pages-content/ 2>/dev/null || true
          cp -r cypress/videos pages-content/ 2>/dev/null || true
          cp -r cypress/cucumber-json pages-content/ 2>/dev/null || true
          ls -la pages-content/

      - name: Setup Pages
        uses: actions/configure-pages@v4
        if: always()

      - name: Upload to GitHub Pages
        uses: actions/upload-pages-artifact@v3
        if: always()
        with:
          path: pages-content

  deploy:
    if: always()
    needs: cypress-tests
    runs-on: ubuntu-latest
    environment:
      name: github-pages
      url: ${{ steps.deployment.outputs.page_url }}
    steps:
      - name: Deploy to GitHub Pages
        id: deployment
        uses: actions/deploy-pages@v4 